{
  "name": "nestle",
  "version": "2.0.3",
  "description": "A layout system built for Stylus",
  "keywords": [
    "stylus",
    "css",
    "grid",
    "nesting",
    "nested",
    "hierarchy",
    "white space"
  ],
  "homepage": "https://github.com/roblafeve/nestle",
  "bugs": {
    "url": "https://github.com/roblafeve/nestle/issues"
  },
  "license": "MIT",
  "author": {
    "name": "Rob LaFeve"
  },
  "main": "index.styl",
  "repository": {
    "type": "git",
    "url": "git://github.com/roblafeve/nestle.git"
  },
  "dependencies": {
    "gulp": "^3.8.11",
    "gulp-autoprefixer": "^2.2.0",
    "gulp-concat": "^2.5.2",
    "gulp-jade": "^1.0.0",
    "gulp-server-livereload": "^1.2.4",
    "gulp-stylus": "^2.0.1"
  },
  "readme": "Nestle\n===========\n\nNestle is a white space generator built for Stylus. It makes it easy to maintain consistent vertical rythm and inner spacing. Since the web isn't purely vertical, Nestle includes a robust grid module that ties in seemlessly.\n\n## Installation\n\n```bash\n$ npm install nestle\n```\n\n## Setup\n\nBe sure to import Nestle into your `main.styl` or equivilant file (at the top, preferably). Adjust the path of this import depending on your setup. If you're using Express be sure to require nestle\n\n```Stylus\n@import 'nestle'\n```\n\n## Configuration\n\nTo begin using Nestle, place the `nestle()` function somewhere in your project. If you plan on using `@extend` to utilize various Nestle classess inside your custom classes, place this mixin high enough in your code to allow for this.\n\n```Stylus\nnestle(ratio, shift, steps, dev, bg)\n```\n- `ratio` — sets ratio for white space scale (default `1.5`)\n- `shift` — adjusts ratio relative to base font size (default `-2.5`)\n- `steps` — number of steps in the scale (default `6`, like h1-h6)\n- `dev`   — when set to `true` elements are rendered with backgrounds to let you see what you're doing. This is especially helpful for becoming familiar with how (default `false`)\n- `bg` — color used for `dev` option (default `teal`)\n\n## Usage\n\nThe `nestle()` function generates CSS classes that define padding for the element it is applied to and sets spacing for child elements, including grids.\n\n### Components\n\n#### `.pad-x`\n\nThis class may be applied directly to the element that gets padding, but extending it inside your custom elements may give you more control.\n\n```CSS\n.pad-1 { padding: 2.756em }\n.pad-2 { padding: 1.837em }\n.pad-3 { padding: 1.225em }\n.pad-4 { padding: 0.816em }\n.pad-5 { padding: 0.544em }\n.pad-6 { padding: 0.363em }\n```\n\n#### `.nest-x`\n\nThis class may be applied directly to the element that defines a new nesting context, but extending it inside your custom elements may give you more control.\n\n```CSS\n.nest-1 * { margin-top: 1.837em }\n.nest-2 * { margin-top: 1.225em }\n.nest-3 * { margin-top: 0.816em }\n.nest-4 * { margin-top: 0.544em }\n.nest-5 * { margin-top: 0.363em }\n.nest-6 * { margin-top: 0.242em }\n```\n\n#### `.grid`\n\nSince it would be strange to only have vertical rythm and spacing control, Nestle comes with a rubust horizontal grid system built in. It's best to think of this as a reusable module with a few key components. These components consist of:\n\n- `.grid` — this element recieves all modifer classes and when the grid has spacing it counteracts the inevitable outer gutters that a grid produces. `.grid` can be modified by various subclasses (e.g. `.grid.spaced`):\n\n  * `.spaced` — horizontally spaces colums and ties into the nest level set by the nearest `.nest-x` parent\n  * `.auto` — will divide column width equally across total width of grid (does not work with `.col.min` and `.col.max`)\n  * `.inline` — causes grid to collapse to its content width\n  * `.align-top` — columns vertically align to the top\n  * `.align-middle` — columns vertically align to the middle\n  * `.align-bottom` — columns vertically align to the bottom\n  * `.height-full` — fills height of parent\n\n- `.grid-items` — this element contains the group of elements that you want to be presented in columns.\n- `.col` — this element represents the grid column and has two sub-classes:\n  + `.min` — column will collapse to minimum width that its content allows\n  + `.max` - column will expand as far as other columns allow\n\n```HTML\n<div class=\"grid\">\n  <div class=\"grid-items\">\n    <div class=\"col\"><!-- content --></div>\n    <div class=\"col\"><!-- content --></div>\n    <div class=\"col\"><!-- content --></div>\n  </div>\n</div>\n```\n\n### Examples\n\nApplied directly to HTML:\n\n```HTML\n<article class=\"pad-1 nest-1\">\n  <header><!-- content --></article>\n  <div><!-- content --></div>\n  <footer><!-- content --></footer>\n</article>\n```\n\nUsing @extend:\n```CSS\narticle\n  @extend .pad-1, .nest-1\n```\n\n\n\n",
  "readmeFilename": "README.md",
  "gitHead": "0f299086306127c501d9c8450b0b3db8f507ff73",
  "_id": "nestle@2.0.3",
  "scripts": {},
  "_shasum": "dfaf7c8d78aef37c489987dbda66e9862156cf37",
  "_from": "nestle@>=2.0.0 <3.0.0"
}
